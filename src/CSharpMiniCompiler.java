/* Generated By:JavaCC: Do not edit this line. CSharpMiniCompiler.java */
import Nodes.*;
import java.io.File;
import java.io.FileInputStream;

public class CSharpMiniCompiler implements CSharpMiniCompilerConstants {
  public static void main(String args []) throws ParseException
  {
    try
    {
      // Initialize a new instance of our mini C# compiler and give it a stream to a file containing C# code      CSharpMiniCompiler compiler = new CSharpMiniCompiler(new FileInputStream(new File("src/sampleCSharp.txt")));

      // Start the compiler      TreeNode main = compiler.start();

      // Execute the main root node containing all children nodes      main.Execute();
    }
    catch (Exception e)
    {
      // Print the message if an exception is thrown      System.out.println(e.getMessage());
    }
  }

// Main entry point of the compiler  static final public TreeNode start() throws ParseException, Exception {
  TreeNode main;
    jj_consume_token(NAMESPACE);
    jj_consume_token(VAR_NAME);
    jj_consume_token(LCURLY);
    jj_consume_token(PUBLIC);
    jj_consume_token(CLASS);
    jj_consume_token(VAR_NAME);
    jj_consume_token(LCURLY);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING_DT);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    jj_consume_token(VAR_NAME);
    jj_consume_token(RPAREN);
    jj_consume_token(LCURLY);
    main = blockOfCode();
                                                       {if (true) return main;}
    jj_consume_token(RCURLY);
    jj_consume_token(RCURLY);
    jj_consume_token(RCURLY);
    throw new Error("Missing return statement in function");
  }

// Reads an if statement with all its specifications and returns an IfNode  static final public IfNode ifStatement() throws ParseException, Exception {
  // Main if node  IfNode ifNode = new IfNode();

  // Boolean expression to be evaluated   BooleanExpressionNode expression;

  // Block of code for the if node  BlockNode ifBlock;

  // Block of code for the else block (optional)  BlockNode elseBlock;

  // Single statement for the if node  TreeNode singleIfStatement;

  // Single statement for the else node  TreeNode singleElseStatement;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression = booleanExpressionStatement();
                                                            ifNode.Add(expression);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case INC:
    case DEC:
    case DO:
    case WHILE:
    case SWITCH:
    case FOR:
    case INT_DT:
    case DOUBLE_DT:
    case STRING_DT:
    case BOOL_DT:
    case PRINT:
    case VAR_NAME:
      singleIfStatement = statement();
                                           ifNode.Add(singleIfStatement);
      break;
    case LCURLY:
      jj_consume_token(LCURLY);
      ifBlock = blockOfCode();
                                                                                                                 ifNode.Add(ifBlock);
      jj_consume_token(RCURLY);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_1(2)) {
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INC:
      case DEC:
      case DO:
      case WHILE:
      case SWITCH:
      case FOR:
      case INT_DT:
      case DOUBLE_DT:
      case STRING_DT:
      case BOOL_DT:
      case PRINT:
      case VAR_NAME:
        singleElseStatement = statement();
                                              ifNode.Add(singleElseStatement);
        break;
      case LCURLY:
        jj_consume_token(LCURLY);
        elseBlock = blockOfCode();
                                                                                                                        ifNode.Add(elseBlock);
        jj_consume_token(RCURLY);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a boolean expressions and returns a BooleanExpresssionNode describing the expression flow  static final public BooleanExpressionNode booleanExpressionStatement() throws ParseException, Exception {
  // Expression to be returned  BooleanExpressionNode expression = new BooleanExpressionNode();

  // Current condition to be added to the expression  ConditionNode condition;

  // Boolean operator to be presented between conditions (&&, ||)  BooleanOperatorNode booleanOperatorNode;
    condition = conditionStatement();
                                     expression.Add(condition);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      booleanOperatorNode = captureBooleanOperator();
                                                     expression.Add(booleanOperatorNode);
      condition = conditionStatement();
                                       expression.Add(condition);
    }
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

// Reads a condition and returns a ConditionNode describing the condition content  static final public ConditionNode conditionStatement() throws ParseException, Exception {
  // Condition node to be returned  ConditionNode conditionNode = new ConditionNode();

  // Operand variables of the condition  VarNameNode var1, var2;

  // Comparision operator between operands  ComparisionOperationNode opNode;

  // Literal values as operands   LiteralValueNode literal1, literal2;

  // Boolean variable incase the condition was read as 'true' or 'false'  Boolean bool;
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        var1 = captureVarName();
                                 conditionNode.Add(var1);
        break;
      case FALSE:
      case TRUE:
      case INT:
      case DOUBLE:
      case STRING:
        literal1 = captureLiteralValue();
                                                                                                 conditionNode.Add(literal1);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case LT:
      case GT:
      case LE:
      case GE:
      case NEQ:
        opNode = comparisionOperation();
                                                conditionNode.Add(opNode);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_NAME:
          var2 = captureVarName();
                                         conditionNode.Add(var2);
          break;
        case FALSE:
        case TRUE:
        case INT:
        case DOUBLE:
        case STRING:
          literal2 = captureLiteralValue();
                                                                                                         conditionNode.Add(literal2);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
        bool = captureBoolean();
                                      conditionNode.Add(new LiteralValueNode(bool));
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return conditionNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a while statement and returns a while node describing the contents of the statement  static final public WhileNode whileStatement() throws ParseException, Exception {
  // While node to be returned  WhileNode whileNode = new WhileNode();

  // Boolean expression to be evaluated for the execution of the while code block  BooleanExpressionNode expression;

  // Block of code for the while statement  BlockNode block;

  // Single statement in case it was as so  TreeNode singleStatement;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = booleanExpressionStatement();
                                                               whileNode.Add(expression);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case INC:
    case DEC:
    case DO:
    case WHILE:
    case SWITCH:
    case FOR:
    case INT_DT:
    case DOUBLE_DT:
    case STRING_DT:
    case BOOL_DT:
    case PRINT:
    case VAR_NAME:
      singleStatement = statement();
                                    whileNode.Add(singleStatement);
      break;
    case LCURLY:
      jj_consume_token(LCURLY);
      block = blockOfCode();
                                                                                                         whileNode.Add(block);
      jj_consume_token(RCURLY);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a do while statement and returns DoWhileNode describing its content  static final public DoWhileNode doWhileStatement() throws ParseException, Exception {
  // DoWhileNode to be returned  DoWhileNode doWhileNode = new DoWhileNode();

  // Expression to be evaluated for the execution of the do while statement  BooleanExpressionNode expression;

  // Block of code to be executed when the expression is evaluated to true  BlockNode block;

  // Single statement in case is was as so  TreeNode singleStatement;
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case INC:
    case DEC:
    case DO:
    case WHILE:
    case SWITCH:
    case FOR:
    case INT_DT:
    case DOUBLE_DT:
    case STRING_DT:
    case BOOL_DT:
    case PRINT:
    case VAR_NAME:
      singleStatement = statement();
                                          doWhileNode.Add(singleStatement);
      break;
    case LCURLY:
      jj_consume_token(LCURLY);
      block = blockOfCode();
                                                                                                                   doWhileNode.Add(block);
      jj_consume_token(RCURLY);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression = booleanExpressionStatement();
                                                                doWhileNode.Add(expression);
    jj_consume_token(RPAREN);
    {if (true) return doWhileNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a switch statement and returned a SwitchNode describing its content  static final public SwitchNode switchStatement() throws ParseException, Exception {
  // Switch node to be returned  SwitchNode switchNode = new SwitchNode();

  // Current case to be added to the switch node  BaseCase currentCase;

  // Variable name to be tested in the switch statement  VarNameNode varName;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    varName = captureVarName();
                                                 switchNode.Add(varName);
    jj_consume_token(RPAREN);
    jj_consume_token(LCURLY);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      currentCase = caseStatement();
                                      switchNode.Add(currentCase);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      currentCase = defaultCaseStatement();
                                             switchNode.Add(currentCase);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
    {if (true) return switchNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a normal case for the switch statment  static final public CaseNode caseStatement() throws ParseException, Exception {
  // Case node to be returned CaseNode caseNode;

 // Block of code to be executed for when the current case's value matches the tested value  BlockNode block;

 // Literal value belonging to the case and value to be tested and matched with the switch variable  LiteralValueNode literalValueNode;
    jj_consume_token(CASE);
    literalValueNode = captureLiteralValue();
    jj_consume_token(COLON);
    block = blockOfCode();
     caseNode = new CaseNode(literalValueNode); caseNode.Add(block);
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
    {if (true) return caseNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a default case for the switch statement  static final public DefaultCaseNode defaultCaseStatement() throws ParseException, Exception {
  // Default case node to be returned  DefaultCaseNode defaultCaseNode = new DefaultCaseNode();

  // Block of code to be executed if the execution reaches the default case  BlockNode block;
    jj_consume_token(DEF);
    jj_consume_token(COLON);
    block = blockOfCode();
                                        defaultCaseNode.Add(block);
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
    {if (true) return defaultCaseNode;}
    throw new Error("Missing return statement in function");
  }

// Reads an assignment statement and returns an AssignNode describing its content  static final public AssignNode assignStatement() throws ParseException, Exception {
  // Assign Node to be returned  AssignNode assignNode = new AssignNode();

  // Datatype to be read for the newly created variable  DataTypeNode typeNode;

  // The newly created variable name  VarNameNode newVarNameNode;

  // Literal value to be assigned for the newly created variable  LiteralValueNode literalValueNode;

  // Other assignable values like (a variable, x++ expression)  TreeNode otherAssignableValueNode;
    typeNode = dataType();
                              assignNode.Add(typeNode);
    newVarNameNode = captureVarName();
                                                                                              assignNode.Add(newVarNameNode);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INT:
    case DOUBLE:
    case STRING:
      literalValueNode = captureLiteralValue();
                                                     assignNode.Add(literalValueNode);
      break;
    case INC:
    case DEC:
    case VAR_NAME:
      otherAssignableValueNode = otherAssignableValues();
                                                               assignNode.Add(otherAssignableValueNode);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return assignNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a for statement and returned a ForNode describing its content  static final public ForNode forStatement() throws ParseException, Exception {
  // ForNode to be returned  ForNode forNode = new ForNode();

  // Initial assign node to be executed first  AssignNode initialAssign;

  // Boolean expression to be evaluated when executing the code associated with the for statement  BooleanExpressionNode expression;

  // The modification statement to be executed for every cycle is done in the for loop  ModificationNode modificationNode;

  // Block of code to be executed when the expression is evaluated to true  BlockNode block;

  // Single statement to be executed if it was so  TreeNode singleStatement;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    initialAssign = assignStatement();
                                                     forNode.Add(initialAssign);
    jj_consume_token(SEMICOLON);
    expression = booleanExpressionStatement();
                                                            forNode.Add(expression);
    jj_consume_token(SEMICOLON);
    modificationNode = modificationStatement();
                                                             forNode.Add(modificationNode);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case INC:
    case DEC:
    case DO:
    case WHILE:
    case SWITCH:
    case FOR:
    case INT_DT:
    case DOUBLE_DT:
    case STRING_DT:
    case BOOL_DT:
    case PRINT:
    case VAR_NAME:
      singleStatement = statement();
                                     forNode.Add(singleStatement);
      break;
    case LCURLY:
      jj_consume_token(LCURLY);
      block = blockOfCode();
                                                                                                          forNode.Add(block);
      jj_consume_token(RCURLY);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return forNode;}
    throw new Error("Missing return statement in function");
  }

// Reads an increment decrement statement and returned an IncDecNode describing its content  static final public IncDecNode incrementDecrementStatement() throws ParseException {
  // Node to be returned  IncDecNode incDecNode = new IncDecNode();

  // Variable name to do the operation on  VarNameNode varNameNode;

  // Operator to be used for the operation  IncDecOperatorNode incDecOperatorNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      varNameNode = captureVarName();
                                      incDecNode.Add(varNameNode);
      incDecOperatorNode = captureIncDecOperator();
                                                                                                                    incDecNode.Add(incDecOperatorNode);
      break;
    case INC:
    case DEC:
      incDecOperatorNode = captureIncDecOperator();
                                                    incDecNode.Add(incDecOperatorNode);
      varNameNode = captureVarName();
                                                                                                                           incDecNode.Add(varNameNode);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return incDecNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a modification statement and returns a ModificationNode describing its content  static final public ModificationNode modificationStatement() throws ParseException, Exception {
  // Node to be returned  ModificationNode modificationNode = new ModificationNode();

  // Variabe to do the modification on  VarNameNode varNameNode;

  // Modification operator to be used ('=', '+=', ....)  ModificationOperatorNode modificationOperatorNode;

  // Literal value to be assigned to the variable  LiteralValueNode literalValueNode;

  // Other assignable values like a variable or x++ expression  TreeNode otherAssignableValuesNode;

  // Or could be a regular increment decrement statement  IncDecNode incDecNode;
    if (jj_2_3(2)) {
      incDecNode = incrementDecrementStatement();
                                                 modificationNode.Add(incDecNode);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        varNameNode = captureVarName();
                                       modificationNode.Add(varNameNode);
        modificationOperatorNode = captureModificationOperator();
                                                                     modificationNode.Add(modificationOperatorNode);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case INT:
        case DOUBLE:
        case STRING:
          literalValueNode = captureLiteralValue();
                                                       modificationNode.Add(literalValueNode);
          break;
        case INC:
        case DEC:
        case VAR_NAME:
          otherAssignableValuesNode = otherAssignableValues();
                                                                  modificationNode.Add(otherAssignableValuesNode);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return modificationNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a print statement and returned a print node decribing its content  static final public PrintNode printStatement() throws ParseException {
  // Node to be returned  PrintNode printNode = new PrintNode();

  // Node to be printed (variable, literalValue)  TreeNode nodeToPrint;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      nodeToPrint = captureVarName();
      break;
    case FALSE:
    case TRUE:
    case INT:
    case DOUBLE:
    case STRING:
      nodeToPrint = captureLiteralValue();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                            printNode.Add(nodeToPrint);
    jj_consume_token(RPAREN);
    {if (true) return printNode;}
    throw new Error("Missing return statement in function");
  }

// Reads a block of code (multiple statements) and returns a block node describing its content  static final public BlockNode blockOfCode() throws ParseException, Exception {
  // Block node to be returned  BlockNode block = new BlockNode();

  // Current node to be added to the block (statement)  TreeNode currentNode;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INC:
      case DEC:
      case DO:
      case WHILE:
      case SWITCH:
      case FOR:
      case INT_DT:
      case DOUBLE_DT:
      case STRING_DT:
      case BOOL_DT:
      case PRINT:
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      currentNode = statement();
                                      block.Add(currentNode);
    }
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

// Reads a statement and returned a general base type for all statement  static final public TreeNode statement() throws ParseException, Exception {
  // Node to be read and returned  TreeNode currentNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      currentNode = ifStatement();
      break;
    case WHILE:
      currentNode = whileStatement();
      break;
    case DO:
      currentNode = doWhileStatement();
      break;
    case FOR:
      currentNode = forStatement();
      break;
    case SWITCH:
      currentNode = switchStatement();
      break;
    case INT_DT:
    case DOUBLE_DT:
    case STRING_DT:
    case BOOL_DT:
      currentNode = assignStatement();
      jj_consume_token(SEMICOLON);
      break;
    case PRINT:
      currentNode = printStatement();
      jj_consume_token(SEMICOLON);
      break;
    case INC:
    case DEC:
    case VAR_NAME:
      currentNode = modificationStatement();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return currentNode;}
    throw new Error("Missing return statement in function");
  }

// Assignable values like a variable or an expression like x+;  static final public TreeNode otherAssignableValues() throws ParseException {
  // Variable name to be assigned  TreeNode copiedVarNameNode;

  // Increment decrement statement   TreeNode incDecNode;
    if (jj_2_4(2)) {
      incDecNode = incrementDecrementStatement();
                                                 {if (true) return incDecNode;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        copiedVarNameNode = captureVarName();
                                           {if (true) return copiedVarNameNode;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// Captures a boolean operator and returned a BooleanOperatorNode  static final public BooleanOperatorNode captureBooleanOperator() throws ParseException {
  Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_AND:
      operator = jj_consume_token(BOOL_AND);
      break;
    case BOOL_OR:
      operator = jj_consume_token(BOOL_OR);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                     {if (true) return new BooleanOperatorNode(operator.image);}
    throw new Error("Missing return statement in function");
  }

// Captures an increment decrement operator and returned an IncDecOperatorNode  static final public IncDecOperatorNode captureIncDecOperator() throws ParseException {
  Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      operator = jj_consume_token(INC);
      break;
    case DEC:
      operator = jj_consume_token(DEC);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                            {if (true) return new IncDecOperatorNode(operator.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a variable name and returned a VarNameNode  static final public VarNameNode captureVarName() throws ParseException {
  Token varName;
    varName = jj_consume_token(VAR_NAME);
                         {if (true) return new VarNameNode(varName.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a datatype and returned a DataTypeNode  static final public DataTypeNode dataType() throws ParseException, Exception {
  Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_DT:
      type = jj_consume_token(INT_DT);
      break;
    case DOUBLE_DT:
      type = jj_consume_token(DOUBLE_DT);
      break;
    case STRING_DT:
      type = jj_consume_token(STRING_DT);
      break;
    case BOOL_DT:
      type = jj_consume_token(BOOL_DT);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                       {if (true) return new DataTypeNode(type.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a modification operator and returned a ModificationOperatorNode  static final public ModificationOperatorNode captureModificationOperator() throws ParseException, Exception {
  Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSEQ:
      operator = jj_consume_token(PLUSEQ);
      break;
    case MINUSEQ:
      operator = jj_consume_token(MINUSEQ);
      break;
    case MULEQ:
      operator = jj_consume_token(MULEQ);
      break;
    case DIVEQ:
      operator = jj_consume_token(DIVEQ);
      break;
    case ASSIGN:
      operator = jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ModificationOperatorNode(operator.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a comparison operator and returned a ComparisionOperatorNode  static final public ComparisionOperationNode comparisionOperation() throws ParseException {
  Token operation;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      operation = jj_consume_token(EQ);
      break;
    case GT:
      operation = jj_consume_token(GT);
      break;
    case LT:
      operation = jj_consume_token(LT);
      break;
    case GE:
      operation = jj_consume_token(GE);
      break;
    case LE:
      operation = jj_consume_token(LE);
      break;
    case NEQ:
      operation = jj_consume_token(NEQ);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ComparisionOperationNode(operation.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a literal value (int, bool, string, double) and returned a LitaralValueNode  static final public LiteralValueNode captureLiteralValue() throws ParseException {
  Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      value = captureInteger();
      break;
    case DOUBLE:
      value = captureDouble();
      break;
    case STRING:
      value = captureString();
      break;
    case FALSE:
    case TRUE:
      value = captureBoolean();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new LiteralValueNode(value);}
    throw new Error("Missing return statement in function");
  }

// Captures a string and returns it  static final public String captureString() throws ParseException {
  Token string;
    string = jj_consume_token(STRING);
                                        {if (true) return string.image.replace("\u005c"", "");}
    throw new Error("Missing return statement in function");
  }

// Captures a double and returns it  static final public Double captureDouble() throws ParseException {
  Token value;
    value = jj_consume_token(DOUBLE);
                                      {if (true) return Double.parseDouble(value.image);}
    throw new Error("Missing return statement in function");
  }

// Captures an integer and returns it  static final public Integer captureInteger() throws ParseException {
  Token value;
    value = jj_consume_token(INT);
                                   {if (true) return Integer.parseInt(value.image);}
    throw new Error("Missing return statement in function");
  }

// Captures a boolean and returns it  static final public Boolean captureBoolean() throws ParseException {
  Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      value = jj_consume_token(TRUE);
      break;
    case FALSE:
      value = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        {if (true) return Boolean.parseBoolean(value.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_28()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_11()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CSharpMiniCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x1000000,0x300000,0x0,0x0,0xf8200,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x7c00,0xf8200,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10f903e8,0x10f903e8,0x0,0x3c006000,0x3c006000,0x0,0x6000,0x10f903e8,0x10f903e8,0x400,0x800,0x3c006060,0x10f903e8,0x10000060,0x3c006060,0x10000000,0x3c006000,0x10f903e8,0x10f903e8,0x10000000,0x0,0x60,0x780000,0x0,0x0,0x2c006000,0x6000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CSharpMiniCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSharpMiniCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSharpMiniCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CSharpMiniCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSharpMiniCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CSharpMiniCompiler(CSharpMiniCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CSharpMiniCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
